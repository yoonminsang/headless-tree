name: Release

permissions:
  contents: write

on:
  push:
    branches:
      - main
    paths:
      - 'package.json'
  workflow_dispatch:

env:
  NODE_VERSION: 22.17.1

jobs:
  check-version:
    runs-on: ubuntu-latest
    outputs:
      version-changed: ${{ steps.version-check.outputs.changed }}
      current-version: ${{ steps.version-check.outputs.version }}
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 2

      - name: Check if version changed
        id: version-check
        run: |
          CURRENT_VERSION=$(cat package.json | jq -r '.version')
          PREVIOUS_VERSION=$(git show HEAD~1:package.json | jq -r '.version')

          echo "Current version: $CURRENT_VERSION"
          echo "Previous version: $PREVIOUS_VERSION"
          echo "version=$CURRENT_VERSION" >> $GITHUB_OUTPUT

          if [ "$CURRENT_VERSION" != "$PREVIOUS_VERSION" ] && [ "$CURRENT_VERSION" != "0.0.0" ]; then
            echo "changed=true" >> $GITHUB_OUTPUT
            echo "✅ Version changed from $PREVIOUS_VERSION to $CURRENT_VERSION"
          else
            echo "changed=false" >> $GITHUB_OUTPUT
            echo "❌ Version not changed or still 0.0.0"
          fi

  publish:
    needs: check-version
    if: needs.check-version.outputs.version-changed == 'true'
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0 # Need full history to find tags

      - name: Fetch tags
        run: git fetch --tags --force

      - name: Enable Corepack
        run: corepack enable

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'pnpm'
          registry-url: 'https://registry.npmjs.org'

      - name: Install dependencies
        run: pnpm install --frozen-lockfile

      - name: Build package
        run: pnpm build

      - name: Publish to npm
        run: pnpm publish --no-git-checks
        env:
          NODE_AUTH_TOKEN: ${{ secrets.NPM_TOKEN }}

      - name: Generate Release Notes
        id: release-notes
        run: |
          VERSION="v${{ needs.check-version.outputs.current-version }}"

          # Get commits since last tag (or all commits if no previous tag)
          LAST_TAG=$(git describe --tags --abbrev=0 2>/dev/null || echo "")

          # Get commits excluding version bump commits
          # Patterns to exclude: "version", "bump", "release", etc.
          if [ -z "$LAST_TAG" ]; then
            COMMITS=$(git log --pretty=format:"%s" --reverse | grep -v -E "^(version|bump|release|v?[0-9]+\.[0-9]+\.[0-9]+)" | sed 's/^/- /')
          else
            COMMITS=$(git log ${LAST_TAG}..HEAD --pretty=format:"%s" --reverse | grep -v -E "^(version|bump|release|v?[0-9]+\.[0-9]+\.[0-9]+)" | sed 's/^/- /')
          fi

          # If no commits found, provide default message
          if [ -z "$COMMITS" ]; then
            COMMITS="- Minor updates and bug fixes"
          fi

          # Create release notes
          cat > release_notes.md << EOF
          ## What's Changed

          $COMMITS

          **Full Changelog**: https://github.com/${{ github.repository }}/compare/${LAST_TAG}...${VERSION}
          EOF

          echo "=== Generated Release Notes ==="
          cat release_notes.md
          echo "=== End Release Notes ==="

          echo "release_notes_file=release_notes.md" >> $GITHUB_OUTPUT

      - name: Create GitHub Release
        uses: softprops/action-gh-release@v2
        with:
          tag_name: v${{ needs.check-version.outputs.current-version }}
          name: Release v${{ needs.check-version.outputs.current-version }}
          body_path: release_notes.md
          draft: false
          prerelease: false
